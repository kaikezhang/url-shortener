version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: url-shortener-postgres
    environment:
      - POSTGRES_DB=${DB_NAME:-url_shortener}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - url-shortener-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  url-shortener:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: url-shortener
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      - BASE_URL=${BASE_URL:-http://localhost:3000}
      - ENABLE_ANALYTICS=${ENABLE_ANALYTICS:-false}
      - ENABLE_CUSTOM_CODES=${ENABLE_CUSTOM_CODES:-false}
      - ENABLE_RATE_LIMITING=${ENABLE_RATE_LIMITING:-false}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-url_shortener}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_POOL_MIN=${DB_POOL_MIN:-2}
      - DB_POOL_MAX=${DB_POOL_MAX:-10}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - url-shortener-network

volumes:
  postgres-data:

networks:
  url-shortener-network:
    driver: bridge
